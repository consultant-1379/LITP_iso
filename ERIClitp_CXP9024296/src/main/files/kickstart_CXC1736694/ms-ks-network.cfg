##############################################
#
# Name: ms-ks-network.cfg
#
# Description:  Kickstart for Interactive LITP MS Server Minimal install (including Gen10)
#
# Distro: RHEL7.9
#
################################################

# Can put a %pre section here which will run before installation and take user entered params
%pre --erroronfail --log=/mnt/sysimage/root/preinstall.log

DISK_BY_PATH=$(ls /dev/disk/by-path/pci-0000:??:??.?-scsi-0:[01]:0:0)
DRIVE=$(basename $(readlink -f ${DISK_BY_PATH}))
if [[ -z "${DRIVE}" ]]
then
  echo "No disk found for installation"
  exit 1
fi

extra_part=''
if [[ -d /sys/firmware/efi ]]
then
  extra_part="part /boot/efi --size=200 --ondrive=${DRIVE}"
else
  DISK_SIZE_TB=$(( 512 * $(< "/sys/block/${DRIVE}/size") / 1024**4 ))
  echo "Disk size in TB = ${DISK_SIZE_TB}" >> /mnt/sysimage/root/preinstall.log
  if [[ ${DISK_SIZE_TB} -ge 2 ]]
  then
    extra_part='part biosboot --fstype=biosboot --size=1'
  fi
fi

echo "Creating disk partition scheme" >> /mnt/sysimage/root/preinstall.log

cat << EOF > /tmp/partition_scheme
clearpart --linux --all --initlabel
zerombr
part /boot --fstype=xfs --size=1000 --ondrive=${DRIVE}
part pv.008002 --grow --size=1 --ondrive=${DRIVE}
${extra_part}
volgroup vg_root --pesize=4096 pv.008002
logvol /    --fstype=xfs --name=lv_root --vgname=vg_root --grow --size=1024 --maxsize=71680
logvol swap --fstype=swap --name=lv_swap --vgname=vg_root --grow --size=1024 --maxsize=2048
logvol /home --fstype=xfs --name=lv_home --vgname=vg_root --grow --size=1024 --maxsize=12288
logvol /var  --fstype=xfs --name=lv_var  --vgname=vg_root --grow --size=1024 --maxsize=10240
logvol /var/tmp  --fstype=xfs --name=lv_var_tmp  --vgname=vg_root --grow --size=1024 --maxsize=35840
logvol /var/opt/rh  --fstype=xfs --name=lv_var_opt_rh  --vgname=vg_root --grow --size=1024 --maxsize=15360
logvol /var/lib/puppetdb  --fstype=xfs --name=lv_var_lib_puppetdb  --vgname=vg_root --grow --size=1024 --maxsize=7168
logvol /var/log --fstype=xfs --name=lv_var_log --vgname=vg_root --grow --size=1024 --maxsize=20480
logvol /var/www --fstype=xfs --name=lv_var_www --vgname=vg_root --grow --size=1024 --maxsize=143360
logvol /software --fstype=xfs --name=lv_software --vgname=vg_root --grow --size=1024 --maxsize=153600
EOF

cat /tmp/partition_scheme >> /mnt/sysimage/root/preinstall.log

# Create network specification from IP parameters used in boot command
IFS=: read -r -a ip_parts <<< `sed -e 's/^.*ip=\([^ ]*\).*$/\1/' /proc/cmdline`
if [ -z ${ip_parts[0]} ] || [ -z ${ip_parts[2]} ] || [ -z ${ip_parts[3]} ] || [ -z ${ip_parts[5]} ]; then echo "Invalid IP boot parameter" >> /mnt/sysimage/root/preinstall.log; exit -1; fi
echo "network --bootproto=static --ip=${ip_parts[0]} --gateway=${ip_parts[2]} --netmask=${ip_parts[3]} --device=${ip_parts[5]} --activate" > /tmp/network_setup
sed -e 's/ /\n/g' /proc/cmdline > /tmp/vmlinuz.boot.cmdline.parts
if [ -z ${ip_parts[-3]} ]; then echo "Hostname must be populated" >> /mnt/sysimage/root/preinstall.log; exit -1; fi
echo "${ip_parts[-3]}" > /tmp/vmlinuz.boot.cmdline.hostname

%end

################################################

######  Section 1. OS config

###############################################

# Use text mode install
text

# Install OS instead of upgrade
install

# Use cdrom install
cdrom

# lang ${language}

timezone "" --isUtc

# keyboard ${keyboard}

# Network setup
%include /tmp/network_setup

bootloader --location=mbr --append="crashkernel=auto rhgb net.ifnames=0 biosdevname=0" --timeout=10

#servicRoot password
rootpw  --iscrypted "$1$GmgvhOgS$nzdmjDlkxRdLAJACMKOM81"

# System authorization infomation
authconfig --enableshadow --passalgo=sha512

# Selinux enforcing
selinux --enforcing

# Reboot after install
reboot

# Disable firewall, remove firewalld package
firewall --disabled

# Services to disable
services --disabled=firewalld,chronyd,NetworkManager

# Services to enable
services --enabled=iptables,ip6tables

# Initial Setup is started the first time the system boots
firstboot --enabled

# Partitioning
%include /tmp/partition_scheme

#############################################

######  Section 2. Packages

#############################################

# Package Repo to be used
repo --name="Red Hat Enterprise Linux"  --baseurl=file:///mnt/source --cost=100

# Install Packages
%packages --nobase
@core
-firewalld
-biosdevname
rsyslog
ruby
bind-chroot
ntp
dhcp
openssh-clients
policycoreutils-python
nfs-utils
ed
expect
pexpect
qemu-kvm
virt-manager
virt-install
man-db
libxslt
device-mapper-multipath
device-mapper-multipath-libs
kpartx
libaio
ipmitool
bridge-utils
sysstat
procps-ng
bind-utils
lsof
ltrace
screen
strace
tcpdump
traceroute
vim-enhanced
file
at
createrepo
tmpwatch
yum-plugin-versionlock
sos
-chronyd
ntp
iptables-services
-NetworkManager
-NetworkManager-team
-NetworkManager-tui
-NetworkManager-config-server
numactl
%end

#############################################

######  Section 3. Post install scripts

#############################################

# We need to copy some files from the DVD, we need --nochroot for this
%post --erroronfail --nochroot --log=/mnt/sysimage/root/postinstall.log

#
# Post install RHEL copy and post tasks
#

echo "Disabled firewalld, using iptables instead" >> /mnt/sysimage/root/postinstall.log

systemctl start iptables
systemctl start ip6tables
systemctl enable iptables
systemctl enable ip6tables
systemctl enable serial-getty@ttyS0
systemctl disable NetworkManager
systemctl stop NetworkManager

echo "++++ Creating directories on ${sysmnt}"

dvdmnt=/mnt/source
dvdrom=$(blkid | grep RHEL-7.* | awk -F':' '{print $1}' | tail -1)
sysmnt=/mnt/sysimage
sysmnt_tmp=${sysmnt}/tmp


echo "dvdmnt = ${dvdmnt} "
echo "sysmnt = ${sysmnt} "

mkdir -p ${sysmnt}/var/www/html/7.9/os/x86_64/
mkdir -p ${sysmnt}/var/www/html/7.9/updates/x86_64/Packages
mkdir -p ${sysmnt}/cloaders

echo "++++ Mount ${dvdrom} and start copy"

# Check if DVD mountpoint exists, if not, create it.
if [ ! -d ${dvdmnt} ]; then
    mkdir -p ${dvdmnt}
fi

# Check if DVD is still mounted or make an attempt to mount it again
if ! mountpoint -q "$dvdmnt"; then
    [ -z ${dvdrom} ] && exit 1
    mount -t iso9660 "$dvdrom" "$dvdmnt"
fi

cd ${dvdmnt}
cp -R * ${sysmnt}/var/www/html/7.9/os/x86_64/
chroot ${sysmnt} bash -c 'cd /var/www/html/7.9/os/x86_64/Packages; echo "++++ Creating repo in $(pwd)"; createrepo .'
chroot ${sysmnt} bash -c 'cd /var/www/html/7.9/updates/x86_64/Packages; echo "++++ Creating repo in $(pwd)"; createrepo .'

cp /tmp/vmlinuz.boot.cmdline.parts ${sysmnt_tmp}
cp /tmp/vmlinuz.boot.cmdline.hostname ${sysmnt_tmp}

hostn=$(cat /tmp/vmlinuz.boot.cmdline.hostname)

curTTY=`tty`
exec < $curTTY > $curTTY 2> $curTTY
clear

export hostname_short=`echo $hostn|cut -f1 -d'.'`

echo -e "NETWORKING=yes" > /etc/sysconfig/network

hostnamectl set-hostname "${hostname_short}"

cp /etc/hostname ${sysmnt}/etc/hostname

if [ "$hostn" = "$hostname_short" ]; then
    echo "127.0.0.1 $hostn localhost" > /etc/hosts
    echo "::1 $hostn localhost" >> /etc/hosts
else
    echo "127.0.0.1 $hostn $hostname_short localhost" > /etc/hosts
    echo "::1 $hostn $hostname_short localhost" >> /etc/hosts
fi

cp /etc/hosts ${sysmnt}/etc/hosts
cp /etc/sysconfig/network ${sysmnt}/etc/sysconfig/network

%end

# Now enter a chroot-ed environment

%post --erroronfail --log=/root/postinstall.log

# Configure serial getty in Grub to allow VSP access
if [[ -f /etc/default/grub ]]; then
  SED_STR=''
  grep "console=" /etc/default/grub | grep "\(console=ttyS\.*\)\(,\)\?\(.*\)"
  if [[ $? == 0 ]]; then
      SED_STR='s/^\(GRUB_CMDLINE_LINUX=\)"\([^"]*\)*\(console=ttyS[^,]*\)"$/\1"\2\3,115200"/g'
  else
      SED_STR='s/^\(GRUB_CMDLINE_LINUX=\)"\([^"]*\)"$/\1"\2 console=ttyS0,115200"/g'
  fi
  sed -i -e "${SED_STR}" /etc/default/grub

  if [[ -d /sys/firmware/efi ]]; then
    grub2-mkconfig -o /boot/efi/EFI/redhat/grub.cfg
  else
    grub2-mkconfig -o /boot/grub2/grub.cfg
  fi
else
  if [[ -d /sys/firmware/efi ]]; then
    /sbin/grubby --update-kernel=$(/sbin/grubby --default-kernel) --args="console=ttyS0,115200" --efi
  else
    /sbin/grubby --update-kernel=$(/sbin/grubby --default-kernel) --args="console=ttyS0,115200"
  fi
fi

# Configure iptables firewall rules
sed -i '/^:OUTPUT.*/a -A INPUT -p udp -m state --state NEW -m udp --dport 67 -j ACCEPT' /etc/sysconfig/iptables
sed -i '/^:OUTPUT.*/a -A INPUT -p udp -m state --state NEW -m udp --dport 69 -j ACCEPT' /etc/sysconfig/iptables
sed -i '/^:OUTPUT.*/a -A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT' /etc/sysconfig/iptables
sed -i '/^:OUTPUT.*/a -A INPUT -p udp -m state --state NEW -m udp --dport 123 -j ACCEPT' /etc/sysconfig/iptables
sed -i '/^:OUTPUT.*/a -A INPUT -p tcp -m state --state NEW -m tcp --dport 8140 -j ACCEPT' /etc/sysconfig/iptables
cp /etc/sysconfig/iptables /etc/sysconfig/iptables.save

# Configure the /etc/ntp.conf file
NTP_CONF='/etc/ntp.conf'
cat <<- EOF >> $NTP_CONF
        server 127.127.1.0  # local clock
        fudge  127.127.1.0 stratum 10
EOF

# Comment out the local server address
sed -i '/rhel.pool.ntp.org/s/^/#/' $NTP_CONF
systemctl enable ntpd.service

# Configure the /etc/systemd/journald.conf to disable rate limiting on logging
JOURNAL_CONF='/etc/systemd/journald.conf'
sed -i -r 's/#RateLimitInterval=[0-9]+/RateLimitInterval=0/' $JOURNAL_CONF
sed -i -r 's/#RateLimitBurst=[0-9]+/RateLimitBurst=0/' $JOURNAL_CONF

# Configure the /etc/rsyslog.conf to disable imjournal/rsyslog rate limiting
RSYSLOG_CONF='/etc/rsyslog.conf'
sed -i '/^$IMJournalStateFile imjournal.state/a $imjournalRatelimitInterval 0\n$imjournalRatelimitBurst 0' $RSYSLOG_CONF

# Purge OOTB yum repos

rm -f /etc/yum.repos.d/rhel-source.repo
rm -f /etc/yum.repos.d/redhat.repo

# Apply high CPU performance profile to MS
if tuned-adm profile latency-performance;
then
  echo "High CPU performance profile applied to MS"
else
  echo "ERROR: Failed to apply High CPU performance profile"
  exit 1
fi

#####################################

######  Section 4. Security

#####################################

echo "++++ Update default security settings"

#### Login ###

# Force change password at first login
chage -d 0 root


# Set minimum password length to 9
perl -npe 's/PASS_MIN_LEN\s+5/PASS_MIN_LEN  9/' -i /etc/login.defs

# Log root activity

# Restrict root login - do not think this is necessary (eeilbar July 2013)
#Get root passwd for single user mode
#echo "Require the root pw when booting into single user mode" >> /etc/inittab
#echo "~~:S:wait:/sbin/sulogin" >> /etc/inittab

# Make user wait 5 seconds before retry failed login
echo "#Make the user waits four seconds if they fail after LOGIN_RETRIES" >> /etc/login.defs
echo "FAIL_DELAY 4" >> /etc/login.defs

# Timeout bash after 8 hours

echo "Timeout bash after 8 hrs"
echo "readonly TMOUT=28800" >> /etc/profile.d/os-security.sh
echo "readonly HISTFILE" >> /etc/profile.d/os-security.sh
chmod +x /etc/profile.d/os-security.sh

# Set banner
cat << 'EOF' > /etc/issue
###########  WARNING  ############

This system is for authorised use only. By using this system you consent to monitoring and data collection.

##################################
EOF

# Enable banner
sed -i 's/^\# no \(default banner path\)$/\# \1/g' /etc/ssh/sshd_config
sed -i 's/^\#Banner none/Banner \/etc\/issue/g' /etc/ssh/sshd_config


#### LITP customization: Tune kernel parameters ####

echo "++++ Update sysctl parameters "

cat << 'EOF' > /etc/sysctl.conf
# Kernel sysctl configuration file for Red Hat Linux
#
# For binary values, 0 is disabled, 1 is enabled.  See sysctl(8) and
# sysctl.conf(5) for more details.

# Controls IP packet forwarding
# net.ipv4.ip_forward = 0

# Controls source route verification
net.ipv4.conf.default.rp_filter = 0

# Do not accept source routing
net.ipv4.conf.default.accept_source_route = 0

# Controls the System Request debugging functionality of the kernel
kernel.sysrq = 0

# Controls whether core dumps will append the PID to the core filename.
# Useful for debugging multi-threaded applications.
# kernel.core_uses_pid = 1

# Controls the use of TCP syncookies
net.ipv4.tcp_syncookies = 1

# Disable netfilter on bridges.
net.bridge.bridge-nf-call-ip6tables = 0
net.bridge.bridge-nf-call-iptables = 0
net.bridge.bridge-nf-call-arptables = 0

# Controls the maximum size of a message, in bytes
kernel.msgmnb = 65536

# Controls the default maxmimum size of a mesage queue
kernel.msgmax = 65536

# Controls the maximum shared segment size, in bytes
kernel.shmmax = 68719476736

# Controls the maximum number of shared memory segments, in pages
kernel.shmall = 4294967296

# LITP customization: enable IPv4 packet forwarding
net.ipv4.ip_forward = 1

# LITP customization: improve security
kernel.exec-shield = 1
kernel.randomize_va_space = 1

# LITP customization: core file dumps
kernel.core_uses_pid = 1
kernel.core_pattern = core.%e.pid%p.usr%u.sig%s.tim%t
fs.suid_dumpable = 2

EOF

#### LITP customization: core file dumps
echo '' >> /etc/security/limits.conf
echo '# LITP customization: core file dumps' >> /etc/security/limits.conf
echo '*               soft    core            unlimited'  >> /etc/security/limits.conf

echo '' >> /etc/sysconfig/init
echo '# LITP customization: core file dumps' >> /etc/sysconfig/init
echo 'DAEMON_COREFILE_LIMIT=unlimited' >> /etc/sysconfig/init

echo '' >> /etc/profile
echo '# LITP customization: core file dumps' >> /etc/profile
echo '# ulimit -c unlimited' >> /etc/profile

rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-*

%end

#############################################

###### Post install NIC reordering

#############################################

%post --erroronfail --log=/root/postinstall.NIC_reorder.log

if  /usr/sbin/dmidecode --type system | /bin/grep -qE "Product Name: ProLiant (DL380p Gen8|DL360p Gen8|DL360 Gen9|DL360 Gen10)" 2>/dev/null ; then

  echo "INFO: Running HPE hardware, creating dynamic nic-name mapping"

  #create set of files with each nic properties
  temp_dir=$(mktemp -d)
  lshw -c network -quiet | awk "/\*-network/{filename=NR\".txt\"}; {print >\"$temp_dir/\"filename}"

  services_mac_addr="$(grep ifname= /tmp/vmlinuz.boot.cmdline.parts |  cut -d : -f 2-)"
  if [ -n "$services_mac_addr" ]; then
    # first determine the eth0 bus by its MAC address
    NIC_PCI_ADDRESSES[0]=$(awk -F @ '/bus\ info/{print $2}' "$(grep -il $services_mac_addr $temp_dir/*)")

    # determine the bus of the other nic on that card
    # diff between list of all nics on this card current nic
    ###
    # this script is ran by /bin/sh so we can use process substitution
    # "diff <(cmd1) <(cmd2)" because its not posix and wont work with sh
    # instead we are piping cmds output to fds 3 and 4 and feeding those to diff
    ###
    NIC_PCI_ADDRESSES+=( $(diff --unchanged-line-format='' --old-line-format=%L --new-line-format='' /dev/fd/3 3<<-EOF /dev/fd/4 4<<-EOF
$(awk -F@ '/bus\ info/{print $2}' $(grep -l "${NIC_PCI_ADDRESSES[0]%.*}" $temp_dir/* ) | sort)
EOF
$(printf "%s\n" "${NIC_PCI_ADDRESSES[0]}" | sort)
EOF
) )

  # assertion to check that there is 2 nics on this card
  if (( "${#NIC_PCI_ADDRESSES[@]}" != 2 )); then
      echo "Number of NICs on PCI device ${NIC_PCI_ADDRESSES[0]%.*} differs from expected 2"
      declare -p NIC_PCI_ADDRESSES
  fi

    # now find the other 2 nics on the other 10gig card
    NIC_PCI_ADDRESSES+=( $(diff --unchanged-line-format='' --old-line-format=%L --new-line-format='' /dev/fd/3 3<<-EOF /dev/fd/4 4<<-EOF
$(awk -F@ '/bus\ info/{print $2}' $(grep -l ": 10Gbit/s" "$temp_dir"/*) /dev/null | sort)
EOF
$(printf "%s\n" "${NIC_PCI_ADDRESSES[@]}"| sort)
EOF
) )
  else
      echo "Error: MAC address of services interface unknown, can't configure 10Gbits NICs"
      exit 1
  fi
  ( echo -n "10Gbits Nics "
  declare -p NIC_PCI_ADDRESSES ) >> /root/postinstall.NIC_reorder.log

  # assert we no have total of 4 nics at this point
  # made non fatal for non standard hw
  if (( "${#NIC_PCI_ADDRESSES[@]}" != 4 )); then
      echo "Number of 10Gbit/s NICs is different than the expected 4"
      declare -p NIC_PCI_ADDRESSES
  fi

  # now handle 1gigs if there are any,
  # and vApp and non standard hardware where enm nics are ordered by pci bus id
  NIC_DIFF_3=( $(diff --unchanged-line-format='' --old-line-format=%L --new-line-format='' /dev/fd/3 3<<-EOF /dev/fd/4 4<<-EOF
  $(awk -F@ '/bus\ info/{print $2}' $temp_dir/* | sort)
EOF
$(printf "%s\n" "${NIC_PCI_ADDRESSES[@]}"| sort)
EOF
) )
  # check if NIC PCI ID is not already in the array before adding
  for my_nic in "${NIC_DIFF_3[@]}"; do
    if [[ ! " ${NIC_PCI_ADDRESSES[@]} " =~ $my_nic ]]; then
      # add to end of array, as these are ordered
      NIC_PCI_ADDRESSES[${#NIC_PCI_ADDRESSES[@]}]=$my_nic;
    fi
  done

  ( echo -n "ALL Nics "
  declare -p NIC_PCI_ADDRESSES ) >> /root/postinstall.NIC_reorder.log
  rm -rf $temp_dir

  UDEV_RULES="/etc/udev/rules.d/70-persistent-net.rules"
  echo -e "# Created by Kickstart\n" > $UDEV_RULES

  for nic_id in "${!NIC_PCI_ADDRESSES[@]}"
  do
     PHYSICAL_DEV="/sys/bus/pci/devices/${NIC_PCI_ADDRESSES[$nic_id]}"
     NETDIR="${PHYSICAL_DEV}/net"
     LOGICAL_DEV=''
     if [ -d "${NETDIR}" ]
     then
         LOGICAL_DEV=$(ls "${NETDIR}")
         # Get MAC addresses
         MAC[$nic_id]=$(cat ${NETDIR}/${LOGICAL_DEV}/address)
     else
         echo "Error: File not found ${NETDIR}" >> /root/postinstall.NIC_reorder.log
         exit 1
     fi
     [ -n "${LOGICAL_DEV}" ] && echo 'ACTION=="add", SUBSYSTEM=="net", KERNELS=="'"${NIC_PCI_ADDRESSES[$nic_id]}"'", NAME="'"net${nic_id}"'"' >> "${UDEV_RULES}"
  done

  BOOTNET=$(grep bootdev /tmp/vmlinuz.boot.cmdline.parts | awk -F '=' '{print $2}')
  if [ -z "${BOOTNET}" ];then
      echo "ERROR: bootdev not found in vmlinuz command" >> /root/postinstall.NIC_reorder.log
      exit 1
  fi
  # Swap ifcfg-BOOTNET with kickstart interface
  NET_SCRIPTS="/etc/sysconfig/network-scripts"
  NIC_PATH="${NET_SCRIPTS}/ifcfg-eth"
  cd "${NET_SCRIPTS}"
  ETH0="eth0"
  IFCFG0="ifcfg-eth0"
  IFCFG_BOOTNET="ifcfg-${BOOTNET}"
  IFCFG_BOOTNET_BAK="ifcfg-${BOOTNET}.bak"

  if [[ -f "${IFCFG_BOOTNET}" ]]; then
    ### deduplicate ifcfg-bootnet
    # remove duplicate entries without sorting
    awk '!seen[$0]++' "${IFCFG_BOOTNET}" > "${IFCFG_BOOTNET_BAK}"
    # move backup file to original
    mv "${IFCFG_BOOTNET_BAK}" "${IFCFG_BOOTNET}"
    ### Check if missing interface is eth0 or not
    # get number of physical interfaces
    NUM_PHYS_INTERFACES=$(find /sys/class/net -type l -not -lname '*virtual*' -printf '%f\n' | wc -l)
    # find missing eth file
    CURRENT_IFCFG_ARRAY=(ifcfg-eth*)
    POSSIBLE_IFCFG=$(x=$NUM_PHYS_INTERFACES; for ((i=0; i<=x-1; i++)); do echo "ifcfg-eth""$i"; done)
    POSSIBLE_IFCFG_ARRAY=( $POSSIBLE_IFCFG )
    # compare two arrays, get the missing interface
    MISSING_ETH=$(echo "${POSSIBLE_IFCFG_ARRAY[@]}" "${CURRENT_IFCFG_ARRAY[@]}" | tr ' ' '\n' | sort | uniq -u)
    echo "Missing interface file is ""${MISSING_ETH}"
    MISSING_ETH_IFNAME_ONLY=$(cut -d '-' -f2 <<< "$MISSING_ETH")
    # check if interface is eth0 or not
    if [[ "${MISSING_ETH}" == "${IFCFG0}" ]]; then
      # rename ifcfg-bootnet to ifcfg-eth0
      mv "${IFCFG_BOOTNET}" "${IFCFG0}"
      # change device name from bootnet
      sed -i -e 's/^DEVICE=.*/DEVICE="'${ETH0}'"/g' -e 's/^NAME=.*/NAME="'${ETH0}'"/g' "${IFCFG0}"
      # remove PREFIX field
      sed -i -e '/^PREFIX/d' "${IFCFG0}"
    else
      ## change ifcfg-eth0
      # change ifcfg-eth0 to not use DHCP and to start on boot
      sed -i -e 's/^ONBOOT=.*/ONBOOT="yes"/g' -e 's/^BOOTPROTO=.*/BOOTPROTO="none"/g' "${IFCFG0}"
      # check if ipv4 or ipv6
      IPV6_ADDR=$(grep "IPV6ADDR" "${IFCFG_BOOTNET}" | cut -d= -f2)
      # take IPv6 address values from ifcfg-bootnet, append them to ifcfg-eth0
      if [[ ! -z "${IPV6_ADDR}" ]]; then
        awk '/^IPV6ADDR/' "${IFCFG_BOOTNET}" >> "${IFCFG0}"
        awk '/^IPV6_DEFAULTGW/' "${IFCFG_BOOTNET}" >> "${IFCFG0}"
      else
        # take IPv4 address values from ifcfg-bootnet, append them to ifcfg-eth0
        awk '/^IPADDR/' "${IFCFG_BOOTNET}" >> "${IFCFG0}"
        awk '/^NETMASK/' "${IFCFG_BOOTNET}" >> "${IFCFG0}"
        awk '/^GATEWAY/' "${IFCFG_BOOTNET}" >> "${IFCFG0}"
      fi
      # change device name from bootnet
      sed -i -e 's/^DEVICE=.*/DEVICE="'eth0'"/g' -e 's/^NAME=.*/NAME="'eth0'"/g' "${IFCFG0}"
      ## swap ifcfg-bootnet to its usual interface
      # move ifcfg-bootnet to proper interface filname
      mv "${IFCFG_BOOTNET}" "${MISSING_ETH}"
      # change missing array file to not use DHCP, and do not start on boot
      sed -i -e 's/^ONBOOT=.*/ONBOOT="no"/g' -e 's/^BOOTPROTO=.*/BOOTPROTO="none"/g' "${MISSING_ETH}"
      # change device name from bootnet
      sed -i -e 's/^DEVICE=.*/DEVICE="'${MISSING_ETH_IFNAME_ONLY}'"/g' -e 's/^NAME=.*/NAME="'${MISSING_ETH_IFNAME_ONLY}'"/g' "${MISSING_ETH}"
      # remove IP & MAC info
      sed -i -e '/^IPADDR/d' -e '/^NETMASK/d' -e '/^GATEWAY/d' -e '/^HWADDR/d' -e '/^IPV6ADDR/d' -e '/^IPV6_DEFAULTGW/d' "${MISSING_ETH}"
      # remove PREFIX field
      sed -i -e '/^PREFIX/d' "${IFCFG0}"
    fi
  else
      echo "ERROR: file ${IFCFG_BOOTNET} in ${NET_SCRIPTS} not found"
  fi

  # Update the interface files to remove NetworkManager control
  for count in "${!NIC_PCI_ADDRESSES[@]}"
  do
      nic_cfg_file="${NIC_PATH}${count}"
      # Retain DEFROUTE for eth0 to allow creation of route
      if [ "${count}" -ne 0 ]; then
          sed -i -e 's/^DEFROUTE=.*/DEFROUTE=no/' "${nic_cfg_file}"
      fi
      echo "NM_CONTROLLED=no" >> "${nic_cfg_file}"
      ethHWconfigured=$(grep HWADDR ${nic_cfg_file})
      # Copy MAC address to interface files if not already populated
      if [[ -z ${ethHWconfigured} ]]; then
          echo "HWADDR=${MAC[$count]}" >> "${nic_cfg_file}"
      fi
  done

  # change dir from ${NET_SCRIPTS}
  cd -

  UPDATE_NIC_NAMES_EXE="/usr/local/bin/updatenicnames.sh"
  touch "${UPDATE_NIC_NAMES_EXE}"
  cat > ${UPDATE_NIC_NAMES_EXE} <<'EndOfScript'
#!/usr/bin/bash
declare -a PRE=$(ls -I lo /sys/class/net)
for nic in ${PRE[@]}
do
  if [[ $nic =~ "net" ]]
  then
    ETHNAME="eth${nic//[!0-9]}"
    ip link set ${nic} down
    ip link set ${nic} name ${ETHNAME}
    ip link set ${ETHNAME} up
    echo "Ethernet device ${nic} changed to ${ETHNAME}" >> /root/postinstall.NIC_reorder.log
  else
    echo "Ethernet device ${nic} not renamed" >> /root/postinstall.NIC_reorder.log
  fi
done
EndOfScript
  chmod +x ${UPDATE_NIC_NAMES_EXE}
  if [[ $? -ne 0 ]]
  then
      echo "ERROR: Failed to make ${UPDATE_NIC_NAMES_EXE} executable" >> /root/postinstall.NIC_reorder.log
  fi

  USR_SYS="/usr/local/lib/systemd/system"
  if [[ ! -d ${USR_SYS} ]]
  then
      mkdir -p ${USR_SYS}
  fi

  UPDATE_NIC_NAMES_SVC="litp_update_nic_names.service"
  UPDATE_NIC_NAMES_SVC_UNIT="${USR_SYS}/${UPDATE_NIC_NAMES_SVC}"
  touch "${UPDATE_NIC_NAMES_SVC_UNIT}"
  cat > ${UPDATE_NIC_NAMES_SVC_UNIT} <<END
####
#oneshot service to rename ethernet devices to ethX format
####
[Unit]
Description=Runs ${UPDATE_NIC_NAMES_EXE}
[Service]
Type=oneshot
ExecStart=${UPDATE_NIC_NAMES_EXE}
StandardOutput=journal
[Install]
WantedBy=multi-user.target
END
  ln -s ${UPDATE_NIC_NAMES_SVC_UNIT} /etc/systemd/system/
  if [ $? -ne 0 ]
  then
    echo "ERROR: Setting up softlink for ${UPDATE_NIC_NAMES_SVC_UNIT} failed" >> /root/postinstall.NIC_reorder.log
  fi

  if ! systemctl enable ${UPDATE_NIC_NAMES_SVC}; then
    echo "ERROR: Failed to configure ${UPDATE_NIC_NAMES_SVC}" >> /root/postinstall.NIC_reorder.log
  fi
else
  # vApps
  echo "INFO: Not running HPE hardware, proceeding with vApp configuration"
  BOOTNET=$(grep bootdev /tmp/vmlinuz.boot.cmdline.parts | awk -F '=' '{print $2}')
  if [ -n "${BOOTNET}" ]; then
    NET_SCRIPTS="/etc/sysconfig/network-scripts"
    cd "${NET_SCRIPTS}"
    IFCFG0="ifcfg-eth0"
    IFCFG_BOOTNET="ifcfg-${BOOTNET}"
    # Update nic NAME and DEVICE to eth0
    sed -i -e 's/^NAME=.*/NAME="eth0"/g' -e 's/^DEVICE=.*/DEVICE="eth0"/g' "${IFCFG_BOOTNET}"
    # Rename ifcfg-BOOTNET rename ifcfg-eth0
    mv "${IFCFG_BOOTNET}" "${IFCFG0}"
  fi
fi

echo "-----------------------------"
echo "----Installation Complete----"
echo "-----------------------------"

%end
